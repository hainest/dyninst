name: Libabigail ABI Checks

on: 
#  pull_request:
#     branches:
#        - master
#     paths:
#       - 'common/**'
#       - 'dataflowAPI/**'
#       - 'dwarf/**'
#       - 'dynC_API/**'
#       - 'dyninstAPI/**'
#       - 'dyninstAPI_RT/**'
#       - 'elf/**'
#       - 'external/**'
#       - 'instructionAPI/**'
#       - 'parseAPI/**'
#       - 'parseThat/**'
#       - 'patchAPI/**'
#       - 'proccontrol/**'
#       - 'stackwalk/**'
#       - 'symlite/**'
#       - 'symtabAPI/**'
#     types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

jobs:

  # Don't run the check if the PR is already marked as an ABI break
  check-if-needed:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.draft == false && !contains(github.event.pull_request.labels.*.name, 'ABI-BREAKER') }}
    steps:
      - run: true

  get-oses:
    runs-on: ubuntu-latest
    needs: check-if-needed
    outputs:
      all: ${{ steps.all.outputs.all }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: all
        uses: ./.github/actions/os-versions

  get-release-version:
    runs-on: ubuntu-latest
    needs: check-if-needed
    outputs:
      value: ${{ steps.version.outputs.release }}
    steps:
      - id: version
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: "dyninst/dyninst"
          excludes: "prerelease, draft"
          token: ${{ secrets.github_token }}

  libabigail:
    runs-on: ubuntu-latest
    needs: [get-oses, get-release-version]
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.get-oses.outputs.all) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/dyninst/amd64/${{ matrix.os }}:${{ needs.get-release-version.outputs.value }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      - name: Checkout Dyninst
        uses: actions/checkout@v4
        with:
          path: "src"  # relative to ${GITHUB_WORKSPACE}

      - name: Build Dyninst
        uses: ./src/.github/actions/build
        with:
          os: ${{ matrix.os }}
          c-compiler: "gcc"
          cxx-compiler: "g++"
          src-dir: "${GITHUB_WORKSPACE}/src"
          install-dir: "${GITHUB_WORKSPACE}/install"

      - name: Install dependencies (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          set -ex
          apt update -qq
          apt install -y libxml2-dev autoconf libtool

      - name: Install dependencies (Fedora)
        if: ${{ startsWith(matrix.os, 'fedora') }}
        run: |
          set -ex
          yum install -y libxml2-devel autoconf libtool

      - name: Build libabigail
        run: |
          set -ex
          git clone --depth=1 git://sourceware.org/git/libabigail.git
          cd libabigail
          autoreconf -i
          mkdir build; cd build
          ../configure --prefix=/libabigail/install
          make -j2
          make install

      - name: Run abidiff
        shell: bash
        run: |
          # Don't use 'vx' here because abidiff is very chatty
          set -e
          
          declare -a libs=(
            "libcommon.so" "libdyninstAPI_RT.so" "libdyninstAPI.so" "libinstructionAPI.so"
            "libparseAPI.so" "libpatchAPI.so" "libpcontrol.so" "libstackwalk.so"
            "libsymtabAPI.so"
          )

          params="--exported-interfaces-only "  # only public symbols
          params+="--deleted-fns "              # deleted public functions
          params+="--deleted-vars "             # deleted public variables
          params+="--no-added-syms "            # ignore added symbols
          params+="--no-unreferenced-symbols "  # ignore changes about symbols not referenced by debug info
          
          mkdir prev; cp /dyninst/install/lib*/*.so prev/
          mkdir cur; cp ${GITHUB_WORKSPACE}/install/lib*/*.so cur/
          
          status=0
          for l in "${libs[@]}"; do
            echo "Diffing $l"
            cur_status=0
            output=`/libabigail/install/bin/abidiff ${params} prev/$l cur/$l 2>&1` || cur_status=1
            if test "${cur_status}" = "1"; then
              printf '=%.0s' {1..100}; echo
              printf "Found an ABI breakage\n\n"
              printf "$output\n\n"
              printf '=%.0s' {1..100}; echo
              status=1
            else
              printf "OK\n\n"
            fi
          done

          exit $status
